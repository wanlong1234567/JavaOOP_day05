回顾:
1.方法的重写(Override):
  1)发生在父子类中，方法名相同，参数列表相同，方法体不同
  2)重写方法被调用时，看对象的类型
2.重写与重载的区别:
  1)重写:发生在父子类中，方法名相同，参数列表相同，方法体不同
         "运行期"绑定，看对象的类型来调用方法
  2)重载:发生在同一类中，方法名相同，参数列表不同，方法体不同
         "编译期"绑定，看引用的类型来绑定方法
3.package和import:
4.访问控制修饰符:
  1)public:公共的，任何类
  2)private:私有的，本类
  3)protected:受保护的，本类、子类、同包类
  4)默认的:什么也不写，本类、同包类
5.static:
  1)静态变量:static，类，方法区中，一份，类名点来访问
             所有对象所共享的资源(图片、音频、视频等)
  2)静态方法:static，类，方法区中，一份，类名点来访问
             没有隐式this传递，在静态方法中不能直接访问实例成员
			 方法的操作仅与参数相关而与对象无关
  3)静态块:static，类，类被加载时自动执行，一次
           初始化静态资源(图征、音频、视频等)
6.内存管理:JVM
  1)堆:存储所有new出来的对象(包括成员变量)
  2)栈:存储正在调用的方法中的所有局部变量(包括参数)
  3)方法区:存储.class字节码文件(包括方法、静态变量)


笔记:
1.final:最终的、不可改变的------单独应用的机率小
  1)修饰变量:变量不能被改变
  2)修饰方法:方法不能被重写
  3)修饰类:类不能被继承
2.static final:常量，应用率高
  1)必须声明同时初始化
  2)通过类名点来访问，不能被改变
  3)建议:常量名所有字母都大写，多个单词用_分隔
  4)编译器在编译时直接将常量替换为具体的值，效率高
3.抽象方法:
  1)由abstract修饰
  2)只有方法的定义，没有方法具体的实现(连{}都没有)
4.抽象类:
  1)由abstract修饰
  2)包含抽象方法的类必须是抽象类
    不包含抽象方法的类也可以声明为抽象类-----我乐意
  3)抽象类不能被实例化
  4)抽象类是需要被继承的，子类:
    4.1)重写所有抽象方法--------一般常规的用法
	4.2)也声明为抽象类----------不常用
  5)抽象类的意义:
    5.1)封装子类共有的属性和行为-------------代码复用
	5.2)为所有子类提供一种统一的类型---------向上造型
	5.3)可以包含抽象方法，为所有子类提供统一的入口
	    每个子类的实现不同，但入口是一致的
5.接口:
  1)是一个标准、规范------------制定方
    遵守了这个标准，就能干某件事------------API后
  2)接口是一种数据类型(引用类型)
  3)由interface定义
  4)只能包含常量和抽象方法
  5)接口不能被实例化
  6)接口是需要被实现的，实现类:
      必须重写接口中的所有抽象方法
  7)一个类可以实现多个接口，用逗号隔开
    若又继承又实现时，应先继承后实现
  8)接口可以继承接口









练习:
1.银行卡系统----------oo.day06
2.求一组图形的最大面积
3.自学抽象类与接口的区别------明天讲























余额-要取的钱==0----------------钱正好够
余额-要取的钱>=2000-------------取完之后至少剩2000
余额-要取的钱>=-2000------------可以透支2000


double num = scan.nextDouble();















interface UnionPay{ //银联
  public void 存款();
  public void 取款();
  public void 查询余额();
  public void 转帐();
}
interface ICBC extends UnionPay{ //工行
  public void 在线支付();
}
interface ABC extends UnionPay{ //农行
  public void 支付电话费();
}

class ICBCImpl implements ICBC{ //工行卡
  public void 存款(){}
  public void 取款(){}
  public void 查询余额(){}
  public void 转帐(){}
  public void 在线支付(){}
}
class ABCImpl implements ABC{ //农行卡
  public void 存款(){}
  public void 取款(){}
  public void 查询余额(){}
  public void 转帐(){}
  public void 支付电话费(){}
}
















InterfaceDemo







类和类-----------------继承extends
接口和接口-------------继承extends
类和接口---------------实现implements










Inter2 o1 = new Inter2(); //编译错误，接口不能被实例化
Inter2 o2 = new Aoo(); //向上造型
Inter1 o3 = new Aoo(); //向上造型

interface Inter1{
  void show();
}
interface Inter2 extends Inter1{
  void test();
}
class Aoo implements Inter2{
  public void test(){}
  public void show(){}
}












interface Inter1{
  void show();
}
interface Inter2{
  void test();
}
abstract class Aoo{
  abstract void say();
}
class Boo extends Aoo implements Inter1,Inter2{
  public void show(){}
  public void test(){}
  public void say(){}
}














interface Inter1{
  void show();
  void say();
}
class Aoo implements Inter1{
  public void show(){}
  public void say(){}
}



















接口是完全抽象的抽象类-----正确的




new Inter1(); //编译错误
Inter1 o1; //正确

interface Inter1{
  public static final int NUM = 5;
  public abstract void show();
  int COUNT = 5; //默认public static final
  void test(); //默认public abstract

  double PI; //编译错误，常量必须声明同时初始化
  void say(){} //编译错误，抽象方法不能有方法体
}










生活中的接口:
1)电脑厂商留USB接口-----------------制定标准、规范
  U盘、摄像头、鼠标等厂商-----------遵守标准、规范
2)国家对开发商----------------------制定标准、规范
  国家对家具、家电------------------制定标准、规范
  开发商、家具、家电厂商------------遵守标准、规范
3)银行------------------------------制定标准、规范
  银行卡----------------------------遵守标准、规范































高质量
-----------继承、重写、向上造型、抽象方法、抽象类














new Tetromino(); //编译错误
new T();
new J();
new L();

abstract class Tetromino{
  Cell[] cells;
  void drop(){...}
  void moveLeft(){...}
  void moveRight(){...}
  void print(){...}
}
class T extends Tetromino{
}
class J extends Tetromino{
}
...







ShapeTest





需求:
  给我一组图形，求这组图形的最大面积

Square[] ss = new Square[3];
ss[0] = new Square(1);
ss[1] = new Square(2);
ss[2] = new Square(3);

Circle[] cs = new Circle[3];
cs[0] = new Circle(1);
cs[1] = new Circle(2);
cs[2] = new Circle(3);

Six[] sixes = new Six[3];
sixes[0] = new Six(1);
sixes[1] = new Six(2);
sixes[2] = new Six(3);

1)找到ss中的最大面积sMax
2)找到cs中的最大面积cMax
3)找到sixes中的最大面积sixMax
4)找到sMax与cMax与sixMax的最大值max

复用性差、扩展性差、维护性差

复用性好、扩展性好、维护性好

Shape[] shapes = new Shape[9]; //创建Shape数组对象
shapes[0] = new Square(1); //向上造型
shapes[1] = new Square(2);
shapes[2] = new Square(3);
shapes[3] = new Circle(1);
shapes[4] = new Circle(2);
shapes[5] = new Circle(3);
shapes[6] = new Six(1);
shapes[7] = new Six(2);
shapes[8] = new Six(3);

double max = shapes[0].area();
for(int i=1;i<shapes.length;i++){
  double area = shapes[i].area();
  if(area>max){
    max=area;
  }
}
System.out.println("最大面积为:"+max);






abstract class Shape{ //抽象类--不完整
  double c;
  abstract double area(); //抽象方法--不完整
}
class Square extends Shape{
  double area(){ //重写抽象方法--变不完整为完整
    return 0.0625*c*c;
  }
}
class Circle extends Shape{
  double area(){
    return 0.0796*c*c;
  }
}
class Six extends Shape{
  double area(){
    return 0.0721*c*c;
  }
}







new Shape(); //编译错误




























abstract class Shape{ //抽象类--不完整
  double c;
  abstract double area(); //抽象方法--不完整
}
class Square extends Shape{
  double area(){ //重写抽象方法--变不完整为完整
    return 0.0625*c*c;
  }
}
class Circle extends Shape{
  double area(){
    return 0.0796*c*c;
  }
}















new Shape(); //编译错误
Shape s; //正确















new Car(); //不合理，编译错误

abstract class Car{ //不完整
  void 前进(){...}
  void 倒退(){...}
  abstract void 停止();
}



















继承、重写、向上造型












NAME
STUDENT_NAME















继承要符合is a(是一个)的关系
绝对不要为了复用代码就继承

class Dog{
  String name;
  int age;
  String address;
}
class Person extends Dog{
  
}
















数据(变量)私有化(private)，行为(方法)公开化(public)




package a;
class Aoo{
}

package b;
class Aoo{
}

package c;
class Test{
  a.Aoo o = new a.Aoo();
  b.Aoo o = new b.Aoo();
}





















